/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keypos.h"
#include "zmk_utils.h"

#define ALL 0xff
#define STD 0 2 3 4 5
#define BASE 0
#define GAME 1
#define QWRT 2
#define SYM  3
#define FN   4
#define NAV  5

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH1 LH0 RH0 RH1

#define COMBO_QT require-prior-idle-ms = <150>;
#define COMBO_FAST 35
#define COMBO_SLOW 35

/*                              34 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────────╮ 30  31 │ 32  33 ╭───────────╯ ╰───────────╮ LH1 LH0 │ RH0 RH1 ╭───────────╯
              ╰────────┴────────╯                         ╰─────────┴─────────╯             */





&mt {
  //flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

/ { 
  behaviors {
    hml: hml {
      compatible = "zmk,behavior-hold-tap";
      label = "HML";
      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick_tap_ms = <175>;
      require-prior-idle-ms = <150>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
      hold-trigger-on-release;  
    };
    hmr: hmr {
      compatible = "zmk,behavior-hold-tap";
      label = "HMR";
      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick_tap_ms = <175>;
      require-prior-idle-ms = <150>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
      hold-trigger-on-release;  
    };
    llt: llt {
      compatible = "zmk,behavior-hold-tap";
      label = "LLT";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      retro-tap;
      bindings = <&mo>, <&to>;
    };
    // tap: comma | shift + tap: semicolon
    MOD_MORPH(COMMA, (<&kp COMMA>, <&kp SEMI>), (<(MOD_LSFT|MOD_RSFT)>))

    // tap: dot | shift + tap: colon
    MOD_MORPH(DOT, (<&kp DOT>, <&kp COLON>), (<(MOD_LSFT|MOD_RSFT)>))

    // tap: ( | shift + tap: <
    MOD_MORPH(LPAR, (<&kp LPAR>, <&kp LT>), (<(MOD_LSFT|MOD_RSFT)>))
    // tap: ) | shift + tap: >
    MOD_MORPH(RPAR, (<&kp RPAR>, <&kp GT>), (<(MOD_LSFT|MOD_RSFT)>))

    // tap: { | shift + tap: [
    MOD_MORPH(LBRC, (<&kp LBRC>, <&kp LBKT>), (<(MOD_LSFT|MOD_RSFT)>))
    // tap: } | shift + tap: ]
    MOD_MORPH(RBRC, (<&kp RBRC>, <&kp RBKT>), (<(MOD_LSFT|MOD_RSFT)>))

    // tap: ~ | shift + tap: `
    MOD_MORPH(TILDE, (<&kp TILDE>, <&kp GRAVE>), (<(MOD_LSFT|MOD_RSFT)>))

    // tap: / | shift + tap: backslash
    MOD_MORPH(SLASH, (<&kp FSLH>, <&kp BSLH>), (<(MOD_LSFT|MOD_RSFT)>))

  };

  combos {
    compatible = "zmk,combos";
    // L hand tab combo (sends opt + ctl on hold)
    COMBO(TAB, &hml LA(LCTRL) TAB, LM2 LM3, STD, COMBO_FAST) 
    // L hand tab combo on game layer only (does not send opt + ctl on hold)
    COMBO(TAB_G, &kp TAB, LM2 LM3, GAME, COMBO_FAST)
    // L hand esc combo (sends opt + cmd on hold)
    COMBO(LESC, &hml LA(LGUI) ESC, LM1 LM2, STD, COMBO_FAST)
    // L hand esc combo on game layer only (does not send opt + ctl on hold)
    COMBO(LESC_G, &kp ESC, LM1 LM2, GAME, COMBO_FAST)
    // R hand esc combo (sends opt + cmd on hold)
    COMBO(RESC, &hmr RA(RGUI) ESC, RM1 RM2, ALL, COMBO_FAST)
    // R hand return combo (sends opt + ctl on hold)
    COMBO(ENTER, &hmr RA(RCTRL) ENTER, RM2 RM3, ALL, COMBO_FAST)
    COMBO(TOG_FN, &tog FN, LM1 LB1, ALL, COMBO_FAST)
    COMBO(TOG_GAME, &tog GAME, LM2 LB2, ALL, COMBO_FAST)
    COMBO(TOG_QWRT, &tog QWRT, LM3 LB3, ALL, COMBO_FAST)
  };

  keymap {
    compatible = "zmk,keymap";
        
    cm_dh_layer {
      bindings = <
        &kp Q &kp W &kp F &kp P &kp B &kp J &kp L &kp U &kp Y &kp SQT
        &hml LSHIFT A &hml LCTRL R &hml LALT S &hml LGUI T &kp G &kp M &hmr RGUI N &hmr RALT E &hmr RCTRL I &hmr RSHIFT O
        &kp Z &kp X &kp C &kp D &kp V &kp K &kp H &mm_COMMA &mm_DOT &mm_SLASH
        &mt LC(LS(LALT)) SPC &kp LSHIFT &mo NAV &mo SYM
      >;
    };
    
    game_layer {
      bindings = <
        &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
        &kp A &kp R &kp S &kp T &kp G &trans &trans &trans &trans &trans
        &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
        &trans &trans &mo NAV &trans
      >;
    };

    qwerty_layer {
      bindings = <
        &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P
        &hml LSHIFT A &hml LCTRL S &hml LALT D &hml LGUI F &kp G &kp H &hmr RGUI J &hmr RALT K &hmr RCTRL L &hmr RSHIFT SQT
        &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &mm_COMMA &mm_DOT &mm_SLASH
        &mt LC(LS(LALT)) SPC &kp LSHIFT &mo NAV &mo SYM
      >;
    };

    symbol_layer {
      bindings = <
        &kp EXCL &kp AT &kp HASH &kp DOLLAR &kp PERCENT &kp CARET &kp AMPERSAND &kp ASTERISK &kp PIPE &kp QMARK
        &hml LSHFT N1 &hml LCTRL N2 &hml LALT N3 &hml LGUI N4 &kp N5 &kp N6 &hmr RGUI N7 &hmr RALT N8 &hmr RCTRL N9 &hmr RSHFT N0
        &kp PLUS &kp EQUAL &mm_LBRC &mm_RBRC &mm_TILDE &kp EXCL &mm_LPAR &mm_RPAR &kp MINUS &kp UNDER
        &trans &trans &trans &trans
        >;
    };

    function_layer {
      bindings = <
        &bt BT_CLR &kp F1 &kp F2 &kp F3 &none &none &kp F7 &kp F8 &kp F9 &none
        &kp LSHFT &hml LCTRL F4 &hml LALT F5 &hml LGUI F6 &kp C_VOL_UP &kp C_BRI_UP &hmr RGUI F10 &hmr RCTRL F11 &hmr RALT F12 &kp RSHFT
        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_NXT &kp C_VOL_DN &kp C_BRI_DN &none &none &none &none
        &trans &trans &tog FN &trans
      >;
    };
    
    nav_layer {
      bindings = <
        &kp ESC &none &none &none &none &none &kp ESC &kp TAB &kp DEL &kp BSPC
        &kp LSHFT &kp LCTRL &kp LALT &kp LGUI &none &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp ENTER
        &none &none &none &none &none &kp HOME &kp PG_DN &kp PG_UP &kp END &none
        &trans &trans &trans &none
      >;
    };

  };
};

